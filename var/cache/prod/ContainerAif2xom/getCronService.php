<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'Contao\CoreBundle\Cron\Cron' shared service.

include_once \dirname(__DIR__, 4).'\\vendor\\contao\\core-bundle\\src\\Cron\\Cron.php';
include_once \dirname(__DIR__, 4).'\\vendor\\contao\\core-bundle\\src\\Cron\\CronJob.php';
include_once \dirname(__DIR__, 4).'\\vendor\\terminal42\\service-annotation-bundle\\src\\ServiceAnnotationInterface.php';
include_once \dirname(__DIR__, 4).'\\vendor\\contao\\core-bundle\\src\\Cron\\LegacyCron.php';

$this->services['Contao\\CoreBundle\\Cron\\Cron'] = $instance = new \Contao\CoreBundle\Cron\Cron(($this->privates['Contao\\CoreBundle\\Repository\\CronJobRepository'] ?? $this->load('getCronJobRepositoryService.php')), ($this->services['doctrine.orm.default_entity_manager'] ?? $this->load('getDoctrine_Orm_DefaultEntityManagerService.php')), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()));

$a = new \Contao\CoreBundle\Cron\LegacyCron(($this->services['contao.framework'] ?? $this->getContao_FrameworkService()));

$instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob($a, '* * * * *', 'onMinutely'));
$instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob($a, '@hourly', 'onHourly'));
$instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob($a, '@daily', 'onDaily'));
$instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob($a, '@weekly', 'onWeekly'));
$instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob($a, '@monthly', 'onMonthly'));

return $instance;
